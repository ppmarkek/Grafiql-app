import { createApi } from "@reduxjs/toolkit/query/react";
import { request, gql, ClientError } from "graphql-request";
// import { createSelector, createEntityAdapter } from "@reduxjs/toolkit";

const graphqlBaseQuery = ({ baseUrl }: {baseUrl:string}) => async ({ body }) => {
  try {
    const result = await request(baseUrl, body);
    return { data: result };
  } catch (error) {
    if (error instanceof ClientError) {
      return { error: { status: error.response.status, data: error } };
    }
    return { error: { status: 500, data: error } };
  }
};
// const FilmsAdapter = createEntityAdapter();

// const initialState = FilmsAdapter.getInitialState();

export const querySlice = createApi({
  reducerPath: "baseQuery",
  baseQuery: graphqlBaseQuery({
    baseUrl: process.env.REACT_APP_DEFAULT_GQL_API || ''
  }),
  endpoints: (builder) => ({
    getQuery: builder.query({
      query: () => ({
        body: gql`
          query {
            company {
				ceo
			  }
			  roadster {
				apoapsis_au
			  }
          }
        `
      })
    }),
  })
});

export const { useGetQueryQuery } = querySlice;

// export const selectFilmsResult = querySlice.endpoints.getFilms.select();

// const selectFilmsData = createSelector(
//   selectFilmsResult,
//   (filmsResult) => filmsResult.data // normalized state object with ids & entities
// );

// export const {
//   selectAll: selectAllFilms,
//   selectById: selectFilmById,
//   selectIds: selectFilmIds
// } = FilmsAdapter.getSelectors(
//   (state) => selectFilmsData(state) ?? initialState
// );
